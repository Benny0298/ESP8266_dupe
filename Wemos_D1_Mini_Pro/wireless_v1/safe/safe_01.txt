/****************************************
* * * * * * * U S A G E * * * * * * * * * 
****************************************/
/* 
 * WiFi connection via Smartphone Hotspot:
 * - SSID ... HUAWEI_P30
 * - PW   ... zGmT!@.651926
 * 
 * config SoftwareSerial for NodeMCU Modbus RTU usage:
 * - Baud      ... 230400
 * - Data      ... 8 Bit
 * - Stop      ... 1 Bit
 * - Parity    ... No
 * - Slave Adr ... 0x01
 * - 
 * - NodeMCU Rx ... GPIO 13 / D7 || actuator Tx ... blue   wire of actuator || logic analyzer red wire 
 * - NodeMCU Tx ... GPIO 15 / D8 || actuator Rx ... yellow wire of actuator || logic analyzer white wire
 * - Connect Grounds of NodeMCU / Actuator / Logic Analyzer
 * - Cannot have both Actuator and Logic Analyzer connected at the same time -> debug separately
 */

/****************************************
* * * * * * I N C L U D E S * * * * * * * 
****************************************/
// WiFi
#include "UbidotsESPMQTT.h"
// Modbus RTU
#include <SoftwareSerial.h>
#include <ModbusRTU.h>
// Timer
#include <Ticker.h>


/**************************************
* * * * * * * D E F I N E S * * * * * * 
**************************************/
// WiFi
// - using personal smartphone hotspot
#define WIFI_SSID "HUAWEI_P30"
#define WIFI_PW   "zGmT!@.651926"
// MQTT
#define MQTT_DEVICE_LABEL "esp_wireless_v1"
#define MQTT_CLIENT_NAME  "wireless_v1"
#define MQTT_BROKER       "industrial.api.ubidots.com"
#define MQTT_TOKEN        "BBFF-pMEcxGgqtxQZdNtsC1Oih3NXq7lI8K"
// Modbus RTU
#define MODBUS_SLAVE_ID   0x1
#define MODBUS_POS_REG    0x100
#define MODBUS_STATUS_REG 0x101
// Timer
#define TIMER1_TICKS 312500

/****************************************
* * * * * * * G L O B A L S * * * * * * * 
****************************************/
// MQTT
char mqttPayload[200];
char mqttTopic[70];
Ubidots ubidotsClient(MQTT_TOKEN);
// Modbus RTU
ModbusRTU mb;
// Timer
Ticker timer;
// Interrupts
volatile int interrupts;
// other
SoftwareSerial usbSerial(3, 1); // debugging info via usb
int count = 0;
int randNum = 0;
float pos = 0;
uint16_t posReg = 0;
uint16_t statusReg = 0;
uint32_t eSource = 0;


/****************************************
* * * * * * C A L L B A C K S * * * * * * 
****************************************/
// MQTT
void mqttCallback(char* topic, byte* payload, unsigned int length)
{
  // handle mqtt message here
  // Serial.printf_P("mqtt message arrived in %s ... %s\n", topic, (char*)payload);

  // check for mqtt topic
  // for example a LED switch
  if(strncmp(topic, "led_switch", 10))
  {
    if((char)payload[0] == '1')
    {
      digitalWrite(2, LOW);
      usbSerial.write("LED_ON\n");
    }
    else
    {
      digitalWrite(2, HIGH);
      usbSerial.write("LED_OFF\n");
    }
  }
}

//Modbus RTU
bool modbusWrite(Modbus::ResultCode event, uint16_t transactionID, void* data)
{
  // check modbus write here
  if(event != Modbus::EX_SUCCESS)
  {
    eSource = mb.eventSource();  // return slave ID of transaction
    // Serial.printf_P("requestResult: 0x%02X | eventSource: 0x%02X\n", event, eSource);
    // usbSerial.write("requestRes: 0x");
    char usbBuf[16];
    sprintf(usbBuf, "requestRes:0x%02X\n", event);
    usbSerial.write(usbBuf, sizeof(usbBuf));
    return false;
  }
  else if(event == Modbus::EX_SUCCESS)
  {
    pos = (float)((posReg/1023.0)*100.0);  // calc position [%] from returned reg value | range 0 ... 1023
    // Serial.printf_P("position:  %.1f%%\n", pos);
    // Serial.printf_P("statusReg: 0x%04X\n", statusReg);
    char usbBuf[10];
    sprintf(usbBuf, "pos:%.1f%%\n", pos); 
    usbSerial.write(usbBuf, sizeof(usbBuf));
    char usbBuf2[12];
    sprintf(usbBuf2, "stat:0x%04X\n", statusReg);
    usbSerial.write(usbBuf2, sizeof(usbBuf2));
  }
   
  return true;
}

/****************************************
* * * * * * * * * I S R s * * * * * * * * 
****************************************/
void ICACHE_RAM_ATTR onTime();


/****************************************
* * * * * S U B   R O U T I N E S * * * * 
****************************************/
void modbusPollSlave(uint8_t slaveID, uint16_t readAdr, uint16_t* resReg, cbTransaction cb)
{
  //mb.readHred(SLAVE_ID, REG_ADDRESS, VARIABLE_NAME, NUM_REGS, CALLBACK);
  mb.readHreg(MODBUS_SLAVE_ID, readAdr, resReg, 1, cb);

  // blocking loop to ensure transaction
  while(mb.slave())
  {
    mb.task();
    delay(10);
  }
}

 
/****************************************
* * * * * * * * S E T U P * * * * * * * * 
****************************************/
void setup() {
  // put your setup code here, to run once:
  // init hardware serial to communicate with pc
  // Serial.begin(115200);

  // config hardware Serial for Modbus RTU via pins D7/D8
  Serial.begin(230400, SERIAL_8N1);  // 230400 baud, 8 data, 1 stop, no parity
  Serial.swap();
  mb.begin(&Serial);
  mb.master();

  // config SoftwareSerial for debugging via USB ... Tx functionality only
  usbSerial.begin(115200, SWSERIAL_8N1);

  // config ubidots MQTT client
  ubidotsClient.setDebug(false);
  ubidotsClient.wifiConnection(WIFI_SSID, WIFI_PW);
  ubidotsClient.begin(mqttCallback);
  ubidotsClient.ubidotsSubscribe("esp_wireless_v1", "led_switch");

  // config LED pin as output
  pinMode(2, OUTPUT);
  digitalWrite(2, HIGH);

  // config timer 
  // - TIM_DIV256 + 312500 ticks ... 1s
  // - config timer AFTER ubidots connection because it acts as a blocking mechanism preventing timer form firing
  timer1_attachInterrupt(onTime);
  timer1_enable(TIM_DIV256, TIM_EDGE, TIM_SINGLE);
  timer1_write(312500);

  delay(50);
}


/****************************************
* * * * * * M A I N   L O O P * * * * * * 
****************************************/
void loop() {
  // put your main code here, to run repeatedly:
  if(!ubidotsClient.connected())
  {
    ubidotsClient.reconnect();
    ubidotsClient.ubidotsSubscribe("esp_wireless_v1", "led_switch");
  }
  
  // poll slave device for actuator position
  // every x+1 loops
  if(count == 2)
  {
    // try to read position
    if(!mb.slave())  // check if no transaction is in progress
    {
      // void modbusPollSlave(ModbusRTU mb, uint8_t slaveID, uint16_t readAdr, uint16_t* resReg, cbTransaction cb)
      modbusPollSlave(MODBUS_SLAVE_ID, MODBUS_POS_REG, &posReg, modbusWrite);
    }

    // try to read status register
    if(!mb.slave())  // check if no transaction is in progress
    {
      // void modbusPollSlave(ModbusRTU mb, uint8_t slaveID, uint16_t readAdr, uint16_t* resReg, cbTransaction cb)
      modbusPollSlave(MODBUS_SLAVE_ID, MODBUS_STATUS_REG, &statusReg, modbusWrite);
    }

    // publish returned values via mqtt
    // position
    ubidotsClient.add("act_position", (float)pos);
    ubidotsClient.ubidotsPublish(MQTT_DEVICE_LABEL);
    // Serial.printf_P("message published: %.1f%%\n", pos);
    // status
    ubidotsClient.add("status_reg", (unsigned int)statusReg);
    ubidotsClient.ubidotsPublish(MQTT_DEVICE_LABEL);
    // Serial.printf_P("message published: %d [dec]\n", statusReg);
    
    // reset count 
    count = 0;
  }
  else
  {
    // increment count
    // Serial.printf_P("count: %d\n", count+1);
    count++;
  }

  // loop and delay
  // debugSerial.write("test");
  // usbSerial.write("test\n");
  ubidotsClient.loop();
  delay(500);
}






/****************************************
* * * * * * * * * I S R s * * * * * * * * 
****************************************/
void ICACHE_RAM_ATTR onTime()
{
  interrupts++;

  char thisBuf[20];
  sprintf(&thisBuf[0], "timer1 isr%d\n", interrupts);
  usbSerial.write(&thisBuf[0], strlen(thisBuf));

  // re-arm timer1 as using TIM_SINGLE
  timer1_write(312500); // TIM_DIV256 + 312500 ticks ... 1s
}
